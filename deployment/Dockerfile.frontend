# Purpose of key lines

# Multi-stage build: keeps final image small by only copying build output.

# npm run build: Generates production-ready static files.

# FROM nginx:alpine: Serves the static files efficiently.

# COPY --from=build: Transfers only the compiled assets.

# Purpose:

# Install both dependencies and devDependencies (so Vite CLI is available).

# Build the React app with Vite.

# Serve the static output via Nginx.

# Build the React app with Vite.
# Serve the static output via Nginx.

# ---- Stage 1: Build with Vite ----
FROM node:18-alpine AS build

WORKDIR /app

# Copy package files and install dependencies
COPY frontend/package.json frontend/package-lock.json ./
RUN npm install

# Copy Vite config, HTML, and source code
COPY frontend/vite.config.js ./
COPY frontend/index.html ./
COPY frontend/src ./src

# Build the static assets
RUN npm run build

# ---- Stage 2: Serve with Nginx ----
FROM nginx:alpine

# Copy build output to Nginx's html folder
COPY --from=build /app/dist /usr/share/nginx/html

# Copy custom Nginx config (enables /api proxy)
COPY frontend/nginx.conf /etc/nginx/conf.d/default.conf

# Expose HTTP port
EXPOSE 80

# Start Nginx in foreground
CMD ["nginx", "-g", "daemon off;"]
# This Dockerfile builds a React app using Vite and serves it with Nginx.
# It uses a multi-stage build to keep the final image small by only copying the build output



