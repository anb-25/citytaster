name: CityTaster Deploy

on:
  push:
    branches: [main]  # Trigger deploy on push to main
  workflow_dispatch:  # Allow manual deployment from GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      DB_NAME: CityTasterDB  # Example env var you may use in containers

    steps:
      # Checkout latest code from main branch
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx (for buildx support: cache, multi-arch, etc)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configure AWS credentials for CLI and Docker login
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to Amazon ECR to push images
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Validate required secrets before build
      - name: Validate secrets
        run: |
          missing=""
          for var in AWS_ACCOUNT_ID AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY S3_BUCKET_NAME EC2_PUBLIC_IP EC2_SSH_KEY; do
            if [ -z "${{ secrets[$var] }}" ]; then
              echo "‚ùå Missing secret: $var"
              missing="yes"
            fi
          done
          if [ "$missing" = "yes" ]; then
            echo "üí• Aborting: one or more required secrets are missing."
            exit 1
          fi

      # Build and push backend image to ECR
      - name: Build and push backend Docker image
        run: |
          docker buildx build \
            --push \
            --file deployment/Dockerfile.backend \  # Backend Dockerfile path
            -t "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/citytaster-backend:latest" \  # ECR image tag
            ./backend  # Build context is ./backend folder

      # Build and push frontend image to ECR
      - name: Build and push frontend Docker image
        run: |
          docker buildx build \
            --push \
            --file deployment/Dockerfile.frontend \  # Frontend Dockerfile path
            -t "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com/citytaster-frontend:latest" \  # ECR image tag
            ./frontend  # Build context is ./frontend folder

      # Upload local data folder to S3 bucket for production use
      - name: Sync data folder to S3
        run: |
          aws s3 sync ./data s3://${{ secrets.S3_BUCKET_NAME }}/data

      # SSH into EC2 and deploy the latest images using docker-compose
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd app || (mkdir app && cd app)  # Ensure app directory exists
            aws s3 sync s3://${{ secrets.S3_BUCKET_NAME }}/data ./data  # Download latest data from S3
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
            docker-compose pull  # Pull latest images
            docker-compose up -d  # Launch services in detached mode
            docker image prune -af  # Clean up unused images to save disk
