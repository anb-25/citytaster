name: CityTaster Deploy

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      DB_NAME: CityTasterDB

    steps:
      # Checkout latest code
      - name: Checkout code
        uses: actions/checkout@v4

      # Set up Docker Buildx for multi-platform build support
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Configure AWS credentials for CLI and Docker
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Ensure EC2 is running (idempotent)
      - name: Ensure EC2 is running
        shell: bash
        env:
          EC2_ID: ${{ secrets.EC2_INSTANCE_ID }}
        run: |
          set -euo pipefail
          STATE=$(aws ec2 describe-instances --instance-ids "$EC2_ID" --region "$AWS_REGION" \
            --query "Reservations[0].Instances[0].State.Name" --output text)
          echo "Current state: $STATE"
          case "$STATE" in
            running)  echo "Already running."; ;;
            stopped)  aws ec2 start-instances --instance-ids "$EC2_ID" --region "$AWS_REGION" >/dev/null ;;
            stopping) aws ec2 wait instance-stopped --instance-ids "$EC2_ID" --region "$AWS_REGION"
                      aws ec2 start-instances --instance-ids "$EC2_ID" --region "$AWS_REGION" >/dev/null ;;
            pending)  : ;; # already starting
            shutting-down|terminated) echo "Instance is $STATE; cannot start."; exit 1 ;;
            *) echo "Unexpected state: $STATE"; exit 1 ;;
          esac
          aws ec2 wait instance-running --instance-ids "$EC2_ID" --region "$AWS_REGION"

      # Get EC2 public IP dynamically (as a step output)
      - name: Get EC2 public IP
        id: ec2ip
        shell: bash
        env:
          EC2_ID: ${{ secrets.EC2_INSTANCE_ID }}
        run: |
          set -euo pipefail
          ip=$(aws ec2 describe-instances --instance-ids "$EC2_ID" --region "$AWS_REGION" \
               --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "public_ip=$ip" >> "$GITHUB_OUTPUT"
          echo "EC2_PUBLIC_IP=$ip" >> "$GITHUB_ENV"
          echo "Public IP is $ip"

      # Login to ECR for docker pushes
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Build and push backend Docker image
      - name: Build and push backend Docker image
        run: |
          docker buildx build \
            --push \
            --file deployment/Dockerfile.backend \
            -t "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/citytaster-backend:latest" \
            .

      # Build and push frontend Docker image
      - name: Build and push frontend Docker image
        run: |
          docker buildx build \
            --push \
            --file deployment/Dockerfile.frontend \
            -t "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/citytaster-frontend:latest" \
            .

      # Sync data directory to S3
      - name: Sync data folder to S3
        run: |
          aws s3 sync ./data "s3://${{ secrets.S3_BUCKET_NAME }}/data"

      # Deploy to EC2 using SSH and docker compose
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ steps.ec2ip.outputs.public_ip }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -euo pipefail

            # Ensure working dir
            cd "$HOME"
            mkdir -p app
            cd app

            # Pull latest data from S3 to a local ./data folder
            aws s3 sync "s3://${{ secrets.S3_BUCKET_NAME }}/data" ./data --region "${{ env.AWS_REGION }}"

            # Login to ECR on the instance (for pulls)
            aws ecr get-login-password --region "${{ env.AWS_REGION }}" \
              | docker login --username AWS --password-stdin \
                "${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com"

            # Pick docker compose command
            if command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            else
              DC="docker compose"
            fi

            # Pull latest images
            $DC pull

            # Start database first so imports work
            $DC up -d mongo || true

            # Import CSVs -> collections (requires ./data mounted to /data in mongo service)
            if ls ./data/*.csv >/dev/null 2>&1; then
              for csv in ./data/*.csv; do
                collection=$(basename "$csv" .csv)
                echo "[INFO] Importing $csv -> $collection"
                $DC exec -T mongo mongoimport \
                  --db CityTasterDB \
                  --collection "$collection" \
                  --type csv --headerline --file "/data/${collection}.csv" --drop
              done
            else
              echo "[INFO] No CSV files to import."
            fi

            # Bring everything up
            $DC up -d

            # Clean up dangling images
            docker image prune -af || true

      # Output the preview URL
      - name: Output Preview URL
        run: |
          echo "------------------------------------------"
          echo "Your app is live at:"
          echo "http://${{ steps.ec2ip.outputs.public_ip }}"
          echo "------------------------------------------"

      # (Optional) Stop EC2 instance after deploy to save costs
      - name: Stop EC2 instance
        if: always()
        env:
          EC2_ID: ${{ secrets.EC2_INSTANCE_ID }}
        run: |
          aws ec2 stop-instances --instance-ids "$EC2_ID" --region "$AWS_REGION"
