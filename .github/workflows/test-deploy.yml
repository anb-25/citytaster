name: CityTaster Deploy

on:
  push:
    branches: [main]  # Trigger deployment when code is pushed to the main branch
  workflow_dispatch:  # Allow manual runs from the GitHub UI

jobs:
  deploy:
    runs-on: ubuntu-latest  # Use Ubuntu runner for the job

    env:
      AWS_REGION: us-east-1  # Default AWS region
      DB_NAME: CityTasterDB  # Environment variable used by backend (optional)

    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Pulls your repo code into the runner

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3  # Enables advanced docker builds (multi-platform, caching, etc)

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}  # Secret set in GitHub repo
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2  # Authenticates docker to ECR registry

      - name: Build and push backend Docker image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
        run: |
          docker buildx build \
            --push \  # Pushes image to ECR after build
            --file deployment/Dockerfile.backend \  # Path to Dockerfile
            --tag $ECR_REGISTRY/citytaster-backend:latest \  # Image name:tag
            ./backend  # Build context (source files)

      - name: Build and push frontend Docker image
        env:
          ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
        run: |
          docker buildx build \
            --push \
            --file deployment/Dockerfile.frontend \
            --tag $ECR_REGISTRY/citytaster-frontend:latest \
            ./frontend

      - name: Sync data folder to S3
        run: |
          aws s3 sync ./data s3://${{ secrets.S3_BUCKET_NAME }}/data  # Uploads data/ folder to S3 bucket

      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1  # SSH into EC2 to pull and run containers
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd app || (mkdir app && cd app)  # Make app dir if it doesn't exist
            aws s3 sync s3://${{ secrets.S3_BUCKET_NAME }}/data ./data  # Download latest data
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com
            docker-compose pull  # Get latest images from ECR
            docker-compose up -d  # Run the services
            docker image prune -af  # Cleanup unused images


