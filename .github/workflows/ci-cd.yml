name: CityTaster CI/CD

on:
  push:
    branches: [ main ]
  workflow_dispatch:     # Allows manual runs from the GitHub UI

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      DB_NAME: CityTasterDB          # Or make this a secret if needed

    steps:
      # Step 1: Checkout code from the repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx for building multi-platform images (best practice)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Configure AWS credentials (use GitHub secrets for access keys)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Step 4: Login to ECR
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # Step 5: Build and push backend Docker image to ECR
      - name: Build and push backend Docker image
        run: |
          docker build -t $ECR_REGISTRY/citytaster-backend:latest ./backend
          docker push $ECR_REGISTRY/citytaster-backend:latest

      # Step 6: Build and push frontend Docker image to ECR
      - name: Build and push frontend Docker image
        run: |
          docker build -t $ECR_REGISTRY/citytaster-frontend:latest ./frontend
          docker push $ECR_REGISTRY/citytaster-frontend:latest

      # Step 7: Sync /data CSVs to S3
      - name: Sync data folder to S3
        run: |
          aws s3 sync ./data s3://${{ secrets.S3_BUCKET_NAME }}/data

      # Step 8: SSH into EC2 and redeploy containers (pull new images, restart stack)
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd app
            aws s3 sync s3://${{ secrets.S3_BUCKET_NAME }}/data ./data
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
            docker-compose pull
            docker-compose up -d

