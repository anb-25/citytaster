name: CityTaster Deploy

on:
  push:
    branches: [main]           # Deploy only on main branch changes
  workflow_dispatch:           # Allow manual triggering

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      AWS_REGION: us-east-1
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
      DB_NAME: CityTasterDB    # If needed for your images or scripts

    steps:
      # --- Checkout code ---
      - name: Checkout code
        uses: actions/checkout@v4

      # --- Set up Docker Buildx for multi-arch support ---
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # --- Configure AWS credentials using GitHub secrets ---
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # --- Login to Amazon ECR (container registry) ---
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      # --- Build and push backend Docker image ---
      - name: Build and push backend Docker image
        run: |
          docker build -t $ECR_REGISTRY/citytaster-backend:latest ./backend
          docker push $ECR_REGISTRY/citytaster-backend:latest

      # --- Build and push frontend Docker image ---
      - name: Build and push frontend Docker image
        run: |
          docker build -t $ECR_REGISTRY/citytaster-frontend:latest ./frontend
          docker push $ECR_REGISTRY/citytaster-frontend:latest

      # --- Sync CSV data folder to S3 (for /data CSVs) ---
      - name: Sync data folder to S3
        run: |
          aws s3 sync ./data s3://${{ secrets.S3_BUCKET_NAME }}/data

      # --- SSH into EC2 and redeploy containers ---
      # Requires the following secrets: EC2_PUBLIC_IP, EC2_SSH_KEY (PEM contents, not path), S3_BUCKET_NAME, AWS_ACCOUNT_ID
      - name: Deploy on EC2 via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Change to the app directory (update if needed)
            cd app || cd ~/app || mkdir -p app && cd app

            # Sync latest CSVs from S3 to /data (update if your app uses a different folder)
            aws s3 sync s3://${{ secrets.S3_BUCKET_NAME }}/data ./data

            # Login to ECR for Docker pulls
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY

            # Pull latest images and redeploy
            docker-compose pull
            docker-compose up -d

            # (Optional) Clean up dangling images
            docker image prune -af

